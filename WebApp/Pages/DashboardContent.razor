@inject AttendanceService AttendanceService
@inject NavigationManager nm
@using ClassLibraryModel
@inject IJSRuntime JSRuntime
<!-- Page Wrapper -->
<div class="wrapper" style="font-family: Calibri; background-color: #f8f9fa;">
    <!-- Main Content -->
    <div class="container-fluid py-4">
        <!-- Metrics Section -->
        <div class="row g-4">
            @foreach (var card in GetMetrics())
            {
                <div class="col-lg-4 col-md-6">
                    <div class="card text-center shadow-sm rounded">
                        <div class="card-body">
                            <h5 class="text-@card.Color fw-bold mb-2">@card.Title</h5>
                            <h2 class="fw-bold text-dark">@card.Value</h2>
                            <span class="badge bg-@card.BadgeColor">@card.BadgeText</span>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Attendance and Recruitment Section -->
        <div class="row mt-4">
            <div class="col-lg-6">
                <div class="card shadow-sm rounded">
                    <div class="card-header bg-primary text-white fw-bold">Daily Attendance Statistic</div>
                    <div class="card-body text-center">
                        <canvas id="attendanceChart"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card shadow-sm rounded">
                    <div class="card-header bg-secondary text-white fw-bold">Recruitment Overview</div>
                    <div class="card-body text-center">
                        <canvas id="recruitmentChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Employee List -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card shadow-sm rounded">
                    <div class="card-header bg-dark text-white d-flex justify-content-between">
                        <span>Employee List</span>
                        <button class="btn btn-success btn-sm" @onclick="ShowAddEmployeeModal">Add New Employee</button>
                    </div>
                    <div class="card-body">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>ID</th>
                                    <th>Email</th>
                                    <th>Date of Birth</th>
                                    <th>Join Date</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Employees.Any())
                                {
                                    @foreach (var employee in Employees)
                                    {
                                        <tr>
                                            <td>@employee.Name</td>
                                            <td>@employee.Id</td>
                                            <td>@employee.Email</td>
                                            <td>@employee.DOB.ToShortDateString()</td>
                                            <td>@employee.JoinDate.ToShortDateString()</td>
                                            <td>
                                                <select class="form-select form-select-sm" @onchange="(e) => UpdateStatus(employee, e.Value.ToString())">
                                                    <option selected="@((employee.Status == "Active") ? "selected" : null)">Active</option>
                                                    <option selected="@((employee.Status == "Inactive") ? "selected" : null)">Inactive</option>
                                                </select>
                                            </td>
                                            <td>
                                                <button class="btn btn-primary btn-sm me-1" @onclick="() => EditEmployee(employee)">Edit</button>
                                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveEmployee(employee)">Remove</button>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="7" class="text-center">No employees found.</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Employee> Employees = new();
    private bool ShowModal = false;
    private bool IsEditMode = false;
    private Employee NewEmployee = new();

    private void ShowAddEmployeeModal()
    {
        NewEmployee = new Employee();
        IsEditMode = false;
        ShowModal = true;
    }

    private void EditEmployee(Employee employee)
    {
        NewEmployee = new Employee(employee);
        IsEditMode = true;
        ShowModal = true;
    }

    private void RemoveEmployee(Employee employee)
    {
        Employees.Remove(employee);
    }

    private void UpdateStatus(Employee employee, string status)
    {
        employee.Status = status;
    }

    private void SaveEmployee()
    {
        if (IsEditMode)
        {
            var existing = Employees.FirstOrDefault(e => e.Id == NewEmployee.Id);
            if (existing != null)
            {
                existing.Update(NewEmployee);
            }
        }
        else
        {
            NewEmployee.Id = Guid.NewGuid().ToString().Substring(0, 8);
            Employees.Add(new Employee(NewEmployee));
        }
        ShowModal = false;
    }

    private void CloseModal() => ShowModal = false;

    private List<MetricCard> GetMetrics() => new()
    {
        new MetricCard("Total Employees", Employees.Count.ToString(), "success", "green", "+0% | Current Employees"),
        new MetricCard("Active Employees", Employees.Count(e => e.Status == "Active").ToString(), "primary", "blue", "Working Today"),
        new MetricCard("Inactive Employees", Employees.Count(e => e.Status == "Inactive").ToString(), "warning", "orange", "Absent Today"),
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeCharts();
        }
    }

    private async Task InitializeCharts()
    {
        // Attendance Chart
        await JSRuntime.InvokeVoidAsync("initializeAttendanceChart", new
        {
            labels = new[] { "Present", "Absent" },
            data = new[] { Employees.Count(e => e.Status == "Active"), Employees.Count(e => e.Status == "Inactive") }
        });

        // Recruitment Chart
        await JSRuntime.InvokeVoidAsync("initializeRecruitmentChart", new
        {
            labels = new[] { "IT Students", "Software", "Data Analytics" },
            data = new[] { 28, 19, 36 }
        });
    }

    private class MetricCard
    {
        public string Title { get; }
        public string Value { get; }
        public string Color { get; }
        public string BadgeColor { get; }
        public string BadgeText { get; }

        public MetricCard(string title, string value, string color, string badgeColor, string badgeText)
        {
            Title = title;
            Value = value;
            Color = color;
            BadgeColor = badgeColor;
            BadgeText = badgeText;
        }
    }
}
